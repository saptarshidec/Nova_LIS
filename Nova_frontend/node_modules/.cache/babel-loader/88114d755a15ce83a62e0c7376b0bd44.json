{"ast":null,"code":"var _jsxFileName = \"F:\\\\IIT Kharagpur\\\\Second Year\\\\SE Lab Group Project\\\\Nova LIS\\\\Nova_frontend\\\\src\\\\components\\\\bookform\\\\BookForm.js\",\n    _s = $RefreshSig$();\n\nimport classes from \"./BookForm.module.css\";\nimport useInput from \"../../hooks/use-input\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isNotEmpty = value => value.trim() !== \"\";\n\nconst isNotNegative = value => +value >= 0 && isNotEmpty(value);\n\nconst isValidYear = value => value <= new Date().getFullYear() && isNotNegative(value) && isNotEmpty(value);\n\nconst BookForm = () => {\n  _s();\n\n  const history = useHistory();\n  const {\n    value: title,\n    isValid: titleIsValid,\n    hasError: titleInputHasError,\n    valueChangeHandler: titleChangeHandler,\n    inputBlurHandler: titleInputBlurHandler,\n    reset: resetTitle\n  } = useInput(isNotEmpty);\n  const {\n    value: author,\n    isValid: authorIsValid,\n    hasError: authorInputHasError,\n    valueChangeHandler: authorChangeHandler,\n    inputBlurHandler: authorInputBlurHandler,\n    reset: resetAuthor\n  } = useInput(isNotEmpty);\n  const {\n    value: year,\n    isValid: yearIsValid,\n    hasError: yearInputHasError,\n    valueChangeHandler: yearChangeHandler,\n    inputBlurHandler: yearInputBlurHandler,\n    reset: resetYear\n  } = useInput(isValidYear);\n  const {\n    value: isbn,\n    isValid: isbnIsValid,\n    hasError: isbnInputHasError,\n    valueChangeHandler: isbnChangeHandler,\n    inputBlurHandler: isbnInputBlurHandler,\n    reset: resetIsbn\n  } = useInput(isNotNegative);\n  const {\n    value: copies,\n    isValid: copiesIsValid,\n    hasError: copiesInputHasError,\n    valueChangeHandler: copiesChangeHandler,\n    inputBlurHandler: copiesInputBlurHandler,\n    reset: resetCopies\n  } = useInput(isNotNegative);\n  const {\n    value: url,\n    isValid: urlIsValid,\n    hasError: urlInputHasError,\n    valueChangeHandler: urlChangeHandler,\n    inputBlurHandler: urlInputBlurHandler,\n    reset: resetUrl\n  } = useInput(isNotEmpty);\n  const [titleExists, setTitleExists] = useState(false);\n  const [isbnExists, setIsbnExists] = useState(false);\n  let formIsValid = false;\n  if (titleIsValid && authorIsValid && yearIsValid && isbnIsValid && urlIsValid && copiesIsValid && !titleExists && !isbnExists) formIsValid = true;\n  const normalClasses = classes[\"input__field\"];\n  const errorClasses = classes[\"input__error\"];\n  const titleInputClasses = titleInputHasError || titleExists ? errorClasses : normalClasses;\n  const authorInputClasses = authorInputHasError ? errorClasses : normalClasses;\n  const yearInputClasses = yearInputHasError ? errorClasses : normalClasses;\n  const isbnInputClasses = isbnInputHasError || isbnExists ? errorClasses : normalClasses;\n  const copiesInputClasses = copiesInputHasError ? errorClasses : normalClasses;\n  const urlInputClasses = urlInputHasError ? errorClasses : normalClasses;\n  const [isAdding, setIsAdding] = useState(false);\n\n  const insertBookResponseHandler = data => {\n    setIsAdding(false);\n\n    if (data.accepted) {\n      history.push(\"/registersuccess/\" + \"Successfully added book to library.\");\n    } else {\n      setTitleExists(data.titleExists);\n      setIsbnExists(data.isbnExists);\n    }\n  };\n\n  const insertBook = async body => {\n    setIsAdding(true);\n    window.scroll(0, 0);\n    return await fetch(\"http://localhost:5000/registerBook\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    }).then(response => response.json()).then(data => {\n      insertBookResponseHandler(data);\n      return data;\n    }).catch(error => console.log(error));\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (!formIsValid) {\n      return;\n    }\n\n    const book = {\n      title: title.trim(),\n      author: author.trim(),\n      published_date: year,\n      isbn,\n      no_of_copies: copies,\n      image_url: url,\n      small_image_url: url\n    };\n    insertBook(book).then(data => {\n      if (!data.titleExists) resetTitle();\n      resetAuthor();\n      resetYear();\n      if (!data.isbnExists) resetIsbn();\n      resetCopies();\n      resetUrl();\n    });\n  };\n\n  const masterTitleChangeHandler = event => {\n    titleChangeHandler(event);\n    setTitleExists(false);\n  };\n\n  const masterIsbnChangeHandler = event => {\n    isbnChangeHandler(event);\n    setIsbnExists(false);\n  };\n\n  const Loader = /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: classes[\"registering\"],\n    children: \"Adding book to database...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 20\n  }, this);\n\n  if (!isAdding) {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: `${classes[\"form\"]}`,\n      autoComplete: \"off\",\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: classes[\"form__title\"],\n        children: \"Add book to Nova LIS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes[\"form__inputs\"]}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes[\"input\"],\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: `${classes[\"input__label\"]}`,\n            htmlFor: \"name\",\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: titleInputClasses,\n            id: \"title\",\n            type: \"text\",\n            value: title,\n            name: \"title\",\n            onChange: masterTitleChangeHandler,\n            onBlur: titleInputBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this), (titleInputHasError || titleExists) && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes[\"input__message\"],\n            children: titleInputHasError ? \"Title cannot be empty.\" : \"Title already exists.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes[\"input\"],\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: `${classes[\"input__label\"]}`,\n            htmlFor: \"roll\",\n            children: \"Author\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: authorInputClasses,\n            id: \"author\",\n            type: \"text\",\n            value: author,\n            name: \"author\",\n            onChange: authorChangeHandler,\n            onBlur: authorInputBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }, this), authorInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes[\"input__message\"],\n            children: \"Author name must not be empty.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 49\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes[\"input\"],\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: `${classes[\"input__label\"]}`,\n            htmlFor: \"email\",\n            children: \"Year of Publication\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: yearInputClasses,\n            id: \"copies\",\n            type: \"number\",\n            value: year,\n            name: \"copies\",\n            onChange: yearChangeHandler,\n            onBlur: yearInputBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this), yearInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes[\"input__message\"],\n            children: \"Please choose a valid year.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 48\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${classes[\"input\"]}`,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: `${classes[\"input__label\"]}`,\n            htmlFor: \"password\",\n            children: \"ISBN\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: isbnInputClasses,\n            id: \"isbn\",\n            type: \"number\",\n            value: isbn,\n            name: \"isbn\",\n            onChange: masterIsbnChangeHandler,\n            onBlur: isbnInputBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this), (isbnInputHasError || isbnExists) && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes[\"input__message\"],\n            children: isbnInputHasError ? \"ISBN cannot be empty or negative.\" : \"ISBN already exists.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes[\"input\"],\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: `${classes[\"input__label\"]}`,\n            htmlFor: \"email\",\n            children: \"Copies\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: copiesInputClasses,\n            id: \"copies\",\n            type: \"number\",\n            value: copies,\n            name: \"copies\",\n            onChange: copiesChangeHandler,\n            onBlur: copiesInputBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 25\n          }, this), copiesInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes[\"input__message\"],\n            children: \"Copies cannot be empty or nagative.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 50\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes[\"input\"],\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: `${classes[\"input__label\"]}`,\n            htmlFor: \"email\",\n            children: \"Cover Image Url\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: urlInputClasses,\n            id: \"url\",\n            type: \"text\",\n            value: url,\n            name: \"url\",\n            onChange: urlChangeHandler,\n            onBlur: urlInputBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }, this), urlInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes[\"input__message\"],\n            children: \"Url cannot be empty.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 47\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes[\"form__btn-group\"]}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${classes[\"form__btn\"]}` // disabled={!formIsValid}\n          ,\n          children: \"Add Book\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this);\n  } else {\n    return Loader;\n  }\n};\n\n_s(BookForm, \"Lk3xtj/aw8H0mQo3Qq2B+CukZzo=\", false, function () {\n  return [useHistory, useInput, useInput, useInput, useInput, useInput, useInput];\n});\n\n_c = BookForm;\nexport default BookForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookForm\");","map":{"version":3,"sources":["F:/IIT Kharagpur/Second Year/SE Lab Group Project/Nova LIS/Nova_frontend/src/components/bookform/BookForm.js"],"names":["classes","useInput","useState","useHistory","isNotEmpty","value","trim","isNotNegative","isValidYear","Date","getFullYear","BookForm","history","title","isValid","titleIsValid","hasError","titleInputHasError","valueChangeHandler","titleChangeHandler","inputBlurHandler","titleInputBlurHandler","reset","resetTitle","author","authorIsValid","authorInputHasError","authorChangeHandler","authorInputBlurHandler","resetAuthor","year","yearIsValid","yearInputHasError","yearChangeHandler","yearInputBlurHandler","resetYear","isbn","isbnIsValid","isbnInputHasError","isbnChangeHandler","isbnInputBlurHandler","resetIsbn","copies","copiesIsValid","copiesInputHasError","copiesChangeHandler","copiesInputBlurHandler","resetCopies","url","urlIsValid","urlInputHasError","urlChangeHandler","urlInputBlurHandler","resetUrl","titleExists","setTitleExists","isbnExists","setIsbnExists","formIsValid","normalClasses","errorClasses","titleInputClasses","authorInputClasses","yearInputClasses","isbnInputClasses","copiesInputClasses","urlInputClasses","isAdding","setIsAdding","insertBookResponseHandler","data","accepted","push","insertBook","body","window","scroll","fetch","method","headers","JSON","stringify","then","response","json","catch","error","console","log","submitHandler","event","preventDefault","book","published_date","no_of_copies","image_url","small_image_url","masterTitleChangeHandler","masterIsbnChangeHandler","Loader"],"mappings":"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","sourcesContent":["import classes from \"./BookForm.module.css\";\nimport useInput from \"../../hooks/use-input\";\n\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst isNotEmpty = (value) => value.trim() !== \"\";\nconst isNotNegative = (value) => +value >= 0 && isNotEmpty(value);\nconst isValidYear = (value) => ((value <= (new Date()).getFullYear()) && isNotNegative(value) && isNotEmpty(value));\n\nconst BookForm = () => {\n\n    const history = useHistory();\n\n    const {\n        value: title,\n        isValid: titleIsValid,\n        hasError: titleInputHasError,\n        valueChangeHandler: titleChangeHandler,\n        inputBlurHandler: titleInputBlurHandler,\n        reset: resetTitle,\n    } = useInput(isNotEmpty);\n\n    const {\n        value: author,\n        isValid: authorIsValid,\n        hasError: authorInputHasError,\n        valueChangeHandler: authorChangeHandler,\n        inputBlurHandler: authorInputBlurHandler,\n        reset: resetAuthor,\n    } = useInput(isNotEmpty);\n\n    const {\n        value: year,\n        isValid: yearIsValid,\n        hasError: yearInputHasError,\n        valueChangeHandler: yearChangeHandler,\n        inputBlurHandler: yearInputBlurHandler,\n        reset: resetYear,\n    } = useInput(isValidYear);\n\n    const {\n        value: isbn,\n        isValid: isbnIsValid,\n        hasError: isbnInputHasError,\n        valueChangeHandler: isbnChangeHandler,\n        inputBlurHandler: isbnInputBlurHandler,\n        reset: resetIsbn,\n    } = useInput(isNotNegative);\n\n    const {\n        value: copies,\n        isValid: copiesIsValid,\n        hasError: copiesInputHasError,\n        valueChangeHandler: copiesChangeHandler,\n        inputBlurHandler: copiesInputBlurHandler,\n        reset: resetCopies,\n    } = useInput(isNotNegative);\n\n    const {\n        value: url,\n        isValid: urlIsValid,\n        hasError: urlInputHasError,\n        valueChangeHandler: urlChangeHandler,\n        inputBlurHandler: urlInputBlurHandler,\n        reset: resetUrl,\n    } = useInput(isNotEmpty);\n\n    const [titleExists, setTitleExists] = useState(false);\n    const [isbnExists, setIsbnExists] = useState(false);\n\n    let formIsValid = false;\n    if (\n        titleIsValid &&\n        authorIsValid &&\n        yearIsValid &&\n        isbnIsValid &&\n        urlIsValid &&\n        copiesIsValid &&\n        !titleExists &&\n        !isbnExists\n    )\n        formIsValid = true;\n\n    const normalClasses = classes[\"input__field\"];\n    const errorClasses = classes[\"input__error\"];\n\n    const titleInputClasses = titleInputHasError || titleExists ? errorClasses : normalClasses;\n    const authorInputClasses = authorInputHasError ? errorClasses : normalClasses;\n    const yearInputClasses = yearInputHasError ? errorClasses : normalClasses;\n    const isbnInputClasses = isbnInputHasError || isbnExists ? errorClasses : normalClasses;\n    const copiesInputClasses = copiesInputHasError ? errorClasses : normalClasses;\n    const urlInputClasses = urlInputHasError ? errorClasses : normalClasses;\n\n    const [isAdding, setIsAdding] = useState(false);\n\n    const insertBookResponseHandler = (data) => {\n        setIsAdding(false);\n        if (data.accepted) {\n            history.push(\"/registersuccess/\" + \"Successfully added book to library.\");\n        } else {\n            setTitleExists(data.titleExists);\n            setIsbnExists(data.isbnExists);\n        }\n    };\n\n    const insertBook = async (body) => {\n        setIsAdding(true);\n        window.scroll(0, 0);\n        return await fetch(\"http://localhost:5000/registerBook\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(body),\n        })\n            .then((response) => response.json())\n            .then((data) => {insertBookResponseHandler(data); return data;})\n            .catch((error) => console.log(error));\n    };\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n\n        if (!formIsValid) {\n            return;\n        }\n\n        const book = {\n            title: title.trim(),\n            author: author.trim(),\n            published_date: year,\n            isbn,\n            no_of_copies: copies,\n            image_url: url,\n            small_image_url: url\n        };\n\n        insertBook(book).then((data) => {\n            if (!data.titleExists) resetTitle();\n            resetAuthor();\n            resetYear();\n            if (!data.isbnExists) resetIsbn();\n            resetCopies();\n            resetUrl();\n        });\n    };\n\n    const masterTitleChangeHandler = (event) => {\n        titleChangeHandler(event);\n        setTitleExists(false);\n    }\n\n    const masterIsbnChangeHandler = (event) => {\n        isbnChangeHandler(event);\n        setIsbnExists(false);\n    }\n\n    const Loader = <h1 className={classes[\"registering\"]}>Adding book to database...</h1>;\n\n    if (!isAdding) {\n        return (\n            <form className={`${classes[\"form\"]}`} autoComplete=\"off\" onSubmit={submitHandler}>\n                <h1 className={classes[\"form__title\"]}>Add book to Nova LIS</h1>\n                <div className={`${classes[\"form__inputs\"]}`}>\n                    <div className={classes[\"input\"]}>\n                        <label className={`${classes[\"input__label\"]}`} htmlFor=\"name\">\n                            Title\n                        </label>\n                        <input\n                            className={titleInputClasses}\n                            id=\"title\"\n                            type=\"text\"\n                            value={title}\n                            name=\"title\"\n                            onChange={masterTitleChangeHandler}\n                            onBlur={titleInputBlurHandler}\n                        />\n                        {(titleInputHasError || titleExists) && (\n                            <p className={classes[\"input__message\"]}>\n                                {titleInputHasError\n                                    ? \"Title cannot be empty.\"\n                                    : \"Title already exists.\"}\n                            </p>\n                        )}\n                    </div>\n                    <div className={classes[\"input\"]}>\n                        <label className={`${classes[\"input__label\"]}`} htmlFor=\"roll\">\n                            Author\n                        </label>\n                        <input\n                            className={authorInputClasses}\n                            id=\"author\"\n                            type=\"text\"\n                            value={author}\n                            name=\"author\"\n                            onChange={authorChangeHandler}\n                            onBlur={authorInputBlurHandler}\n                        />\n                        {authorInputHasError && <p className={classes[\"input__message\"]}>\n                                Author name must not be empty.\n                            </p>}\n                    </div>\n                    <div className={classes[\"input\"]}>\n                        <label className={`${classes[\"input__label\"]}`} htmlFor=\"email\">\n                            Year of Publication\n                        </label>\n                        <input\n                            className={yearInputClasses}\n                            id=\"copies\"\n                            type=\"number\"\n                            value={year}\n                            name=\"copies\"\n                            onChange={yearChangeHandler}\n                            onBlur={yearInputBlurHandler}\n                        />\n                        {yearInputHasError &&  <p className={classes[\"input__message\"]}>\n                                Please choose a valid year.\n                            </p>\n                        }\n                    </div>          \n                    <div className={`${classes[\"input\"]}`}>\n                        <label className={`${classes[\"input__label\"]}`} htmlFor=\"password\">\n                            ISBN\n                        </label>\n                        <input\n                            className={isbnInputClasses}\n                            id=\"isbn\"\n                            type=\"number\"\n                            value={isbn}\n                            name=\"isbn\"\n                            onChange={masterIsbnChangeHandler}\n                            onBlur={isbnInputBlurHandler}\n                        />\n                        {(isbnInputHasError || isbnExists) && (\n                            <p className={classes[\"input__message\"]}>\n                                {isbnInputHasError\n                                    ? \"ISBN cannot be empty or negative.\"\n                                    : \"ISBN already exists.\"}\n                            </p>\n                        )}\n                    </div>\n                    <div className={classes[\"input\"]}>\n                        <label className={`${classes[\"input__label\"]}`} htmlFor=\"email\">\n                            Copies\n                        </label>\n                        <input\n                            className={copiesInputClasses}\n                            id=\"copies\"\n                            type=\"number\"\n                            value={copies}\n                            name=\"copies\"\n                            onChange={copiesChangeHandler}\n                            onBlur={copiesInputBlurHandler}\n                        />\n                        {copiesInputHasError &&  <p className={classes[\"input__message\"]}>\n                                Copies cannot be empty or nagative.\n                            </p>\n                        }\n                    </div>\n                    <div className={classes[\"input\"]}>\n                        <label className={`${classes[\"input__label\"]}`} htmlFor=\"email\">\n                            Cover Image Url\n                        </label>\n                        <input\n                            className={urlInputClasses}\n                            id=\"url\"\n                            type=\"text\"\n                            value={url}\n                            name=\"url\"\n                            onChange={urlChangeHandler}\n                            onBlur={urlInputBlurHandler}\n                        />\n                        {urlInputHasError &&  <p className={classes[\"input__message\"]}>\n                                Url cannot be empty.\n                            </p>\n                        }\n                    </div>\n                </div>\n                <div className={`${classes[\"form__btn-group\"]}`}>\n                    <button\n                        className={`${classes[\"form__btn\"]}`}\n                        // disabled={!formIsValid}\n                    >\n                        Add Book\n                    </button>\n                </div>\n            </form>\n        );\n    } else {\n        return Loader;\n    }\n};\n\nexport default BookForm;"]},"metadata":{},"sourceType":"module"}