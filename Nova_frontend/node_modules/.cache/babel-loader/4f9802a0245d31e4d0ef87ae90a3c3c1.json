{"ast":null,"code":"var _jsxFileName = \"F:\\\\IIT Kharagpur\\\\Second Year\\\\SE Lab Group Project\\\\Nova LIS\\\\Nova_frontend\\\\src\\\\components\\\\loginform\\\\LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport useInput from \"../../hooks/use-input\";\nimport classes from \"./LoginForm.module.css\";\nimport UserContext from \"../../store/user-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isNotEmpty = value => value.trim() !== \"\";\n\nconst Login = () => {\n  _s();\n\n  const history = useHistory();\n  const userCtx = useContext(UserContext);\n  const {\n    value: userName,\n    isValid: userNameIsValid,\n    hasError: userNameInputHasError,\n    valueChangeHandler: userNameChangeHandler,\n    inputBlurHandler: userNameInputBlurHandler,\n    reset: resetUserName\n  } = useInput(isNotEmpty);\n  const {\n    value: password,\n    isValid: passwordIsValid,\n    hasError: passwordInputHasError,\n    valueChangeHandler: passwordChangeHandler,\n    inputBlurHandler: passwordInputBlurHandler,\n    reset: resetPassword\n  } = useInput(isNotEmpty);\n  const [usernameExists, setUsernameExists] = useState(true);\n  const [isPasswordCorrect, setIsPasswordCorrect] = useState(true);\n  let formIsValid = false;\n  if (userNameIsValid && !usernameExists && passwordIsValid) formIsValid = true;\n  const normalClasses = classes[\"input__field\"];\n  const errorClasses = classes[\"input__error\"];\n  const userNameInputClasses = userNameInputHasError || !usernameExists ? errorClasses : normalClasses;\n  const passwordInputClasses = passwordInputHasError || !isPasswordCorrect ? errorClasses : normalClasses;\n\n  const loginHandler = data => {\n    if (!data.isRegistered) {\n      setUsernameExists(false);\n    } else {\n      if (data.isPasswordCorrect) {\n        setIsPasswordCorrect(true);\n        const user = {\n          name: data.name,\n          roll: data.roll,\n          designation: data.designation,\n          phone: data.phone,\n          email: data.email,\n          userName: data.userName,\n          isAdmin: data.userName === \"admin\"\n        };\n        userCtx.onLogin(user);\n      } else {\n        setIsPasswordCorrect(false);\n      }\n    }\n  };\n\n  const loginUser = async body => {\n    window.scroll(0, 0);\n    await fetch(\"http://localhost:5000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    }).then(response => response.json()).then(data => loginHandler(data)).catch(error => console.log(error));\n  };\n\n  const masterUsernameChangeHandler = event => {\n    userNameChangeHandler(event);\n    setIsPasswordCorrect(true);\n    setUsernameExists(true);\n  };\n\n  const masterPasswordChangeHandler = event => {\n    passwordChangeHandler(event);\n    setIsPasswordCorrect(true);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    const user = {\n      userName: userName.trim(),\n      password\n    };\n    loginUser(user);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: `${classes[\"form\"]}`,\n    autoComplete: \"off\",\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: classes[\"form__title\"],\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes[\"form__inputs\"]}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes[\"input\"],\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: `${classes[\"input__label\"]}`,\n          htmlFor: \"userName\",\n          children: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: userNameInputClasses,\n          id: \"userName\",\n          type: \"text\",\n          value: userName,\n          name: \"username\",\n          onChange: masterUsernameChangeHandler,\n          onBlur: userNameInputBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), (userNameInputHasError || !usernameExists) && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes[\"input__message\"],\n          children: userNameInputHasError ? \"Username must not be empty.\" : \"Username does not exist.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 68\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes[\"input\"]}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: `${classes[\"input__label\"]}`,\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: passwordInputClasses,\n          id: \"password\",\n          type: \"password\",\n          value: password,\n          name: \"password\",\n          onChange: masterPasswordChangeHandler,\n          onBlur: passwordInputBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this), passwordInputHasError || !isPasswordCorrect && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes[\"input__message\"],\n          children: passwordInputHasError ? \"Password cannot be empty.\" : \"Incorrect password.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 69\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes[\"form__btn-group\"]}`,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${classes[\"form__btn\"]}` // disabled={!formIsValid}\n        ,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"+HH7usUzj9nOaeFojNDxWjmoPvQ=\", false, function () {\n  return [useHistory, useInput, useInput];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["F:/IIT Kharagpur/Second Year/SE Lab Group Project/Nova LIS/Nova_frontend/src/components/loginform/LoginForm.js"],"names":["useState","useContext","useHistory","useInput","classes","UserContext","isNotEmpty","value","trim","Login","history","userCtx","userName","isValid","userNameIsValid","hasError","userNameInputHasError","valueChangeHandler","userNameChangeHandler","inputBlurHandler","userNameInputBlurHandler","reset","resetUserName","password","passwordIsValid","passwordInputHasError","passwordChangeHandler","passwordInputBlurHandler","resetPassword","usernameExists","setUsernameExists","isPasswordCorrect","setIsPasswordCorrect","formIsValid","normalClasses","errorClasses","userNameInputClasses","passwordInputClasses","loginHandler","data","isRegistered","user","name","roll","designation","phone","email","isAdmin","onLogin","loginUser","body","window","scroll","fetch","method","headers","JSON","stringify","then","response","json","catch","error","console","log","masterUsernameChangeHandler","event","masterPasswordChangeHandler","submitHandler","preventDefault"],"mappings":"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","sourcesContent":["import { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport useInput from \"../../hooks/use-input\";\nimport classes from \"./LoginForm.module.css\";\n\nimport UserContext from \"../../store/user-context\";\n\nconst isNotEmpty = (value) => value.trim() !== \"\";\n\nconst Login = () => {\n\n    const history = useHistory();\n\n    const userCtx = useContext(UserContext);\n\n    const {\n        value: userName,\n        isValid: userNameIsValid,\n        hasError: userNameInputHasError,\n        valueChangeHandler: userNameChangeHandler,\n        inputBlurHandler: userNameInputBlurHandler,\n        reset: resetUserName,\n    } = useInput(isNotEmpty);\n\n    const {\n        value: password,\n        isValid: passwordIsValid,\n        hasError: passwordInputHasError,\n        valueChangeHandler: passwordChangeHandler,\n        inputBlurHandler: passwordInputBlurHandler,\n        reset: resetPassword,\n    } = useInput(isNotEmpty);\n\n    const [usernameExists, setUsernameExists] = useState(true);\n    const [isPasswordCorrect, setIsPasswordCorrect] = useState(true);\n\n\n    let formIsValid = false;\n    if (userNameIsValid && !usernameExists && passwordIsValid) formIsValid = true;\n\n    const normalClasses = classes[\"input__field\"];\n    const errorClasses = classes[\"input__error\"];\n\n    const userNameInputClasses = userNameInputHasError || !usernameExists ? errorClasses : normalClasses;\n    const passwordInputClasses = passwordInputHasError || !isPasswordCorrect ? errorClasses : normalClasses;\n\n    const loginHandler = (data) => {\n        if (!data.isRegistered) {\n            setUsernameExists(false);\n        } else {\n            if (data.isPasswordCorrect) {\n                setIsPasswordCorrect(true);\n                const user = {\n                    name: data.name,\n                    roll: data.roll,\n                    designation: data.designation,\n                    phone: data.phone,\n                    email: data.email,\n                    userName: data.userName,\n                    isAdmin: data.userName === \"admin\"\n                };\n                userCtx.onLogin(user);\n            } else {\n                setIsPasswordCorrect(false);\n            }\n        }\n    }\n\n    const loginUser = async (body) => {\n        window.scroll(0, 0);\n        await fetch(\"http://localhost:5000/login\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(body),\n        })\n            .then((response) => response.json())\n            .then((data) => loginHandler(data))\n            .catch((error) => console.log(error));\n    };\n\n    const masterUsernameChangeHandler = (event) => {\n        userNameChangeHandler(event);\n        setIsPasswordCorrect(true);\n        setUsernameExists(true);\n    }\n\n    const masterPasswordChangeHandler = (event) => {\n        passwordChangeHandler(event);\n        setIsPasswordCorrect(true);\n    }\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n\n        const user = {\n            userName: userName.trim(),\n            password\n        };\n\n        loginUser(user);\n    };\n\n    return (\n        <form className={`${classes[\"form\"]}`} autoComplete=\"off\" onSubmit={submitHandler}>\n            <h1 className={classes[\"form__title\"]}>Login</h1>\n            <div className={`${classes[\"form__inputs\"]}`}>\n                <div className={classes[\"input\"]}>\n                    <label className={`${classes[\"input__label\"]}`} htmlFor=\"userName\">\n                        Username\n                    </label>\n                    <input\n                        className={userNameInputClasses}\n                        id=\"userName\"\n                        type=\"text\"\n                        value={userName}\n                        name=\"username\"\n                        onChange={masterUsernameChangeHandler}\n                        onBlur={userNameInputBlurHandler}\n                    />\n                    {(userNameInputHasError || !usernameExists) && <p className={classes[\"input__message\"]}>{userNameInputHasError ? \"Username must not be empty.\" : \"Username does not exist.\"}</p>}\n                </div>\n                <div className={`${classes[\"input\"]}`}>\n                    <label className={`${classes[\"input__label\"]}`} htmlFor=\"password\">\n                        Password\n                    </label>\n                    <input\n                        className={passwordInputClasses}\n                        id=\"password\"\n                        type=\"password\"\n                        value={password}\n                        name=\"password\"\n                        onChange={masterPasswordChangeHandler}\n                        onBlur={passwordInputBlurHandler}\n                    />\n                    {passwordInputHasError || !isPasswordCorrect && <p className={classes[\"input__message\"]}>{passwordInputHasError ? \"Password cannot be empty.\" : \"Incorrect password.\"}</p>}\n                </div>\n            </div>\n            <div className={`${classes[\"form__btn-group\"]}`}>\n                <button\n                    className={`${classes[\"form__btn\"]}`}\n                    // disabled={!formIsValid}\n                >\n                    Login\n                </button>\n            </div>\n        </form>\n    );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}