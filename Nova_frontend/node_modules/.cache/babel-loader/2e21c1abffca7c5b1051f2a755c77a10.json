{"ast":null,"code":"var _jsxFileName = \"F:\\\\IIT Kharagpur\\\\Second Year\\\\SE Lab Group Project\\\\Nova LIS\\\\Nova_frontend\\\\src\\\\components\\\\registerform\\\\RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport classes from \"./RegisterForm.module.css\";\nimport useInput from \"../../hooks/use-input\";\nimport { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport UserContext from \"../../store/user-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isNotEmpty = value => value.trim() !== \"\";\n\nconst isEmail = value => value.includes(\"@\");\n\nconst RegisterForm = () => {\n  _s();\n\n  const history = useHistory();\n  const userCtx = useContext(UserContext);\n  const {\n    value: name,\n    isValid: nameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameInputBlurHandler,\n    reset: resetName\n  } = useInput(isNotEmpty);\n  const {\n    value: roll,\n    isValid: rollIsValid,\n    hasError: rollInputHasError,\n    valueChangeHandler: rollChangeHandler,\n    inputBlurHandler: rollInputBlurHandler,\n    reset: resetRoll\n  } = useInput(isNotEmpty);\n  const {\n    value: designation,\n    isValid: designationIsValid,\n    hasError: designationInputHasError,\n    valueChangeHandler: designationChangeHandler,\n    inputBlurHandler: designationInputBlurHandler,\n    reset: resetDesignation\n  } = useInput(isNotEmpty);\n  const {\n    value: email,\n    isValid: emailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailInputBlurHandler,\n    reset: resetEmail\n  } = useInput(isEmail);\n  const {\n    value: phone,\n    isValid: phoneIsValid,\n    hasError: phoneInputHasError,\n    valueChangeHandler: phoneChangeHandler,\n    inputBlurHandler: phoneInputBlurHandler,\n    reset: resetPhone\n  } = useInput(isNotEmpty);\n  const {\n    value: userName,\n    isValid: userNameIsValid,\n    hasError: userNameInputHasError,\n    valueChangeHandler: userNameChangeHandler,\n    inputBlurHandler: userNameInputBlurHandler,\n    reset: resetUserName\n  } = useInput(isNotEmpty);\n  const {\n    value: password,\n    isValid: passwordIsValid,\n    hasError: passwordInputHasError,\n    valueChangeHandler: primaryPasswordChangeHandler,\n    inputBlurHandler: passwordInputBlurHandler,\n    reset: resetPassword\n  } = useInput(isNotEmpty);\n\n  const isConfirmPasswordValid = value => {\n    return value === password;\n  };\n\n  const {\n    value: confirmPassword,\n    isValid: confirmPasswordIsValid,\n    hasError: confirmPasswordInputHasError,\n    valueChangeHandler: confirmPasswordChangeHandler,\n    inputBlurHandler: confirmPasswordInputBlurHandler,\n    reset: resetConfirmPassword\n  } = useInput(isConfirmPasswordValid);\n\n  const passwordChangeHandler = event => {\n    primaryPasswordChangeHandler(event);\n    resetConfirmPassword();\n  }; // const designationChangeHandler = (event) => {\n  //     setDesignation(event.target.value);\n  // };\n\n\n  const [rollExists, setRollExists] = useState(false);\n  const [emailExists, setEmailExists] = useState(false);\n  const [phoneExists, setPhoneExists] = useState(false);\n  const [usernameExists, setUsernameExists] = useState(false);\n  let formIsValid = false;\n  if (nameIsValid && rollIsValid && !rollExists && designationIsValid && emailIsValid && !emailExists && phoneIsValid && !phoneExists && userNameIsValid && !usernameExists && passwordIsValid) formIsValid = true;\n  const normalClasses = classes[\"input__field\"];\n  const errorClasses = classes[\"input__error\"];\n  const nameInputClasses = nameInputHasError ? errorClasses : normalClasses;\n  const rollInputClasses = rollInputHasError || rollExists ? errorClasses : normalClasses;\n  const designationInputClasses = designationInputHasError ? errorClasses : normalClasses;\n  const emailInputClasses = emailInputHasError || emailExists ? errorClasses : normalClasses;\n  const phoneInputClasses = phoneInputHasError || phoneExists ? errorClasses : normalClasses;\n  const userNameInputClasses = userNameInputHasError || usernameExists ? errorClasses : normalClasses;\n  const passwordInputClasses = passwordInputHasError ? errorClasses : normalClasses;\n  const confirmPasswordInputClasses = confirmPasswordInputHasError ? errorClasses : normalClasses;\n  const [isRegistering, setIsRegistering] = useState(false);\n\n  const registerHandler = data => {\n    setIsRegistering(false);\n\n    if (data.accepted) {\n      history.push(\"/registersuccess/\" + \"Successfully registered to the library.\");\n    } else {\n      setRollExists(data.rollExists);\n      setEmailExists(data.emailExists);\n      setPhoneExists(data.phoneExists);\n      setUsernameExists(data.usernameExists);\n    }\n  };\n\n  const insertUser = async body => {\n    setIsRegistering(true);\n    window.scroll(0, 0);\n    return await fetch(\"http://localhost:5000/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    }).then(response => response.json()).then(data => {\n      registerHandler(data);\n      return data;\n    }).catch(error => console.log(error));\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (!formIsValid) {\n      return;\n    }\n\n    const user = {\n      name: name.trim(),\n      roll: roll.trim(),\n      designation,\n      email: email.trim(),\n      phone: phone.trim(),\n      userName: userName.trim(),\n      password\n    };\n    insertUser(user).then(data => {\n      resetName();\n      if (!data.rollExists) resetRoll();\n      if (!data.emailExists) resetEmail();\n      if (!data.phoneExists) resetPhone();\n      if (!data.usernameExists) resetUserName();\n      resetPassword();\n      resetConfirmPassword();\n    });\n  };\n\n  const masterPhoneChangeHandler = event => {\n    phoneChangeHandler(event);\n    setPhoneExists(false);\n  };\n\n  const masterEmailChangeHandler = event => {\n    emailChangeHandler(event);\n    setEmailExists(false);\n  };\n\n  const masterUsernameChangeHandler = event => {\n    userNameChangeHandler(event);\n    setUsernameExists(false);\n  };\n\n  const masterRollChangeHandler = event => {\n    rollChangeHandler(event);\n    setRollExists(false);\n  };\n\n  const Loader = /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: classes[\"registering\"],\n    children: \"Registering...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 20\n  }, this); // console.log(userCtx);\n\n\n  if (!isRegistering) {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      className: `${classes[\"form\"]}`,\n      autoComplete: \"off\",\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: classes[\"form__title\"],\n        children: userCtx.isLoaded && userCtx.user.isAdmin ? \"Register a Member\" : \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes[\"form__inputs\"]}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes[\"input\"],\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: `${classes[\"input__label\"]}`,\n            htmlFor: \"name\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: nameInputClasses,\n            id: \"name\",\n            type: \"text\",\n            value: name,\n            name: \"name\",\n            onChange: nameChangeHandler,\n            onBlur: nameInputBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes[\"input__message\"],\n            children: \"Name must not be empty.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 47\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes[\"input\"],\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: `${classes[\"input__label\"]}`,\n            htmlFor: \"roll\",\n            children: \"Roll Number\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: rollInputClasses,\n            id: \"roll\",\n            type: \"text\",\n            value: roll,\n            name: \"roll\",\n            onChange: masterRollChangeHandler,\n            onBlur: rollInputBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 25\n          }, this), (rollInputHasError || rollExists) && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes[\"input__message\"],\n            children: rollInputHasError ? \"Please enter a valid roll number.\" : \"Roll number already exists.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes[\"input\"],\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: `${classes[\"input__label\"]}`,\n            htmlFor: \"roll\",\n            children: \"Choose Designation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: designationInputClasses,\n            value: designation,\n            onChange: designationChangeHandler,\n            onBlur: designationInputBlurHandler,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select your designation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"UG Student\",\n              className: classes[\"option\"],\n              children: \"UG Student\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"PG Student\",\n              className: classes[\"option\"],\n              children: \"PG Student\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Research Scholar\",\n              className: classes[\"option\"],\n              children: \"Research Scholar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Faculty\",\n              className: classes[\"option\"],\n              children: \"Faculty\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 25\n          }, this), designationInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes[\"input__message\"],\n            children: \"Please choose a designation.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes[\"input\"],\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: `${classes[\"input__label\"]}`,\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: emailInputClasses,\n            id: \"email\",\n            type: \"text\",\n            value: email,\n            name: \"email\",\n            onChange: masterEmailChangeHandler,\n            onBlur: emailInputBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 25\n          }, this), (emailInputHasError || emailExists) && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes[\"input__message\"],\n            children: emailInputHasError ? \"Please enter a valid email.\" : \"Email already exists.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes[\"input\"],\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: `${classes[\"input__label\"]}`,\n            htmlFor: \"phone\",\n            children: \"Phone\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: phoneInputClasses,\n            id: \"phone\",\n            type: \"text\",\n            value: phone,\n            name: \"phone\",\n            onChange: masterPhoneChangeHandler,\n            onBlur: phoneInputBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 25\n          }, this), (phoneInputHasError || phoneExists) && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes[\"input__message\"],\n            children: phoneInputHasError ? \"Please enter a valid phone number.\" : \"Phone already exists.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes[\"input\"],\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: `${classes[\"input__label\"]}`,\n            htmlFor: \"userName\",\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: userNameInputClasses,\n            id: \"userName\",\n            type: \"text\",\n            value: userName,\n            name: \"username\",\n            onChange: masterUsernameChangeHandler,\n            onBlur: userNameInputBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 25\n          }, this), (userNameInputHasError || usernameExists) && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes[\"input__message\"],\n            children: userNameInputHasError ? \"Username must not be empty.\" : \"Username already exists.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${classes[\"input\"]}`,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: `${classes[\"input__label\"]}`,\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: passwordInputClasses,\n            id: \"password\",\n            type: \"password\",\n            value: password,\n            name: \"password\",\n            onChange: passwordChangeHandler,\n            onBlur: passwordInputBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 25\n          }, this), passwordInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes[\"input__message\"],\n            children: \"Password cannot be empty.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${classes[\"input\"]}`,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: `${classes[\"input__label\"]}`,\n            htmlFor: \"confirm-password\",\n            children: \"Confirm Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: confirmPasswordInputClasses,\n            id: \"cofirm-password\",\n            type: \"password\",\n            value: confirmPassword,\n            name: \"confirm-password\",\n            onChange: confirmPasswordChangeHandler,\n            onBlur: confirmPasswordInputBlurHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 25\n          }, this), confirmPasswordInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: classes[\"input__message\"],\n            children: \"Passwords do not match.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes[\"form__btn-group\"]}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${classes[\"form__btn\"]}` // disabled={!formIsValid}\n          ,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this);\n  } else {\n    return Loader;\n  }\n};\n\n_s(RegisterForm, \"Wb9zV03UUsutlT3qjuPDpsk2S5Y=\", false, function () {\n  return [useHistory, useInput, useInput, useInput, useInput, useInput, useInput, useInput, useInput];\n});\n\n_c = RegisterForm;\nexport default RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["F:/IIT Kharagpur/Second Year/SE Lab Group Project/Nova LIS/Nova_frontend/src/components/registerform/RegisterForm.js"],"names":["classes","useInput","useState","useContext","useHistory","UserContext","isNotEmpty","value","trim","isEmail","includes","RegisterForm","history","userCtx","name","isValid","nameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameInputBlurHandler","reset","resetName","roll","rollIsValid","rollInputHasError","rollChangeHandler","rollInputBlurHandler","resetRoll","designation","designationIsValid","designationInputHasError","designationChangeHandler","designationInputBlurHandler","resetDesignation","email","emailIsValid","emailInputHasError","emailChangeHandler","emailInputBlurHandler","resetEmail","phone","phoneIsValid","phoneInputHasError","phoneChangeHandler","phoneInputBlurHandler","resetPhone","userName","userNameIsValid","userNameInputHasError","userNameChangeHandler","userNameInputBlurHandler","resetUserName","password","passwordIsValid","passwordInputHasError","primaryPasswordChangeHandler","passwordInputBlurHandler","resetPassword","isConfirmPasswordValid","confirmPassword","confirmPasswordIsValid","confirmPasswordInputHasError","confirmPasswordChangeHandler","confirmPasswordInputBlurHandler","resetConfirmPassword","passwordChangeHandler","event","rollExists","setRollExists","emailExists","setEmailExists","phoneExists","setPhoneExists","usernameExists","setUsernameExists","formIsValid","normalClasses","errorClasses","nameInputClasses","rollInputClasses","designationInputClasses","emailInputClasses","phoneInputClasses","userNameInputClasses","passwordInputClasses","confirmPasswordInputClasses","isRegistering","setIsRegistering","registerHandler","data","accepted","push","insertUser","body","window","scroll","fetch","method","headers","JSON","stringify","then","response","json","catch","error","console","log","submitHandler","preventDefault","user","masterPhoneChangeHandler","masterEmailChangeHandler","masterUsernameChangeHandler","masterRollChangeHandler","Loader","isLoaded","isAdmin"],"mappings":"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","sourcesContent":["import classes from \"./RegisterForm.module.css\";\nimport useInput from \"../../hooks/use-input\";\n\nimport { useState, useContext } from \"react\";\n\nimport { useHistory } from \"react-router-dom\";\nimport UserContext from \"../../store/user-context\";\n\nconst isNotEmpty = (value) => value.trim() !== \"\";\n\nconst isEmail = (value) => value.includes(\"@\");\n\nconst RegisterForm = () => {\n\n    const history = useHistory();\n    const userCtx = useContext(UserContext);\n\n    const {\n        value: name,\n        isValid: nameIsValid,\n        hasError: nameInputHasError,\n        valueChangeHandler: nameChangeHandler,\n        inputBlurHandler: nameInputBlurHandler,\n        reset: resetName,\n    } = useInput(isNotEmpty);\n\n    const {\n        value: roll,\n        isValid: rollIsValid,\n        hasError: rollInputHasError,\n        valueChangeHandler: rollChangeHandler,\n        inputBlurHandler: rollInputBlurHandler,\n        reset: resetRoll,\n    } = useInput(isNotEmpty);\n\n    const {\n        value: designation,\n        isValid: designationIsValid,\n        hasError: designationInputHasError,\n        valueChangeHandler: designationChangeHandler,\n        inputBlurHandler: designationInputBlurHandler,\n        reset: resetDesignation,\n    } = useInput(isNotEmpty);\n\n    const {\n        value: email,\n        isValid: emailIsValid,\n        hasError: emailInputHasError,\n        valueChangeHandler: emailChangeHandler,\n        inputBlurHandler: emailInputBlurHandler,\n        reset: resetEmail,\n    } = useInput(isEmail);\n\n    const {\n        value: phone,\n        isValid: phoneIsValid,\n        hasError: phoneInputHasError,\n        valueChangeHandler: phoneChangeHandler,\n        inputBlurHandler: phoneInputBlurHandler,\n        reset: resetPhone,\n    } = useInput(isNotEmpty);\n\n    const {\n        value: userName,\n        isValid: userNameIsValid,\n        hasError: userNameInputHasError,\n        valueChangeHandler: userNameChangeHandler,\n        inputBlurHandler: userNameInputBlurHandler,\n        reset: resetUserName,\n    } = useInput(isNotEmpty);\n\n    const {\n        value: password,\n        isValid: passwordIsValid,\n        hasError: passwordInputHasError,\n        valueChangeHandler: primaryPasswordChangeHandler,\n        inputBlurHandler: passwordInputBlurHandler,\n        reset: resetPassword,\n    } = useInput(isNotEmpty);\n\n    const isConfirmPasswordValid = (value) => {\n        return value === password;\n    };\n\n    const {\n        value: confirmPassword,\n        isValid: confirmPasswordIsValid,\n        hasError: confirmPasswordInputHasError,\n        valueChangeHandler: confirmPasswordChangeHandler,\n        inputBlurHandler: confirmPasswordInputBlurHandler,\n        reset: resetConfirmPassword,\n    } = useInput(isConfirmPasswordValid);\n\n    const passwordChangeHandler = (event) => {\n        primaryPasswordChangeHandler(event);\n        resetConfirmPassword();\n    };\n\n    // const designationChangeHandler = (event) => {\n    //     setDesignation(event.target.value);\n    // };\n\n    const [rollExists, setRollExists] = useState(false);\n    const [emailExists, setEmailExists] = useState(false);\n    const [phoneExists, setPhoneExists] = useState(false);\n    const [usernameExists, setUsernameExists] = useState(false);\n\n    let formIsValid = false;\n    if (\n        nameIsValid &&\n        rollIsValid &&\n        !rollExists &&\n        designationIsValid &&\n        emailIsValid &&\n        !emailExists &&\n        phoneIsValid &&\n        !phoneExists &&\n        userNameIsValid &&\n        !usernameExists &&\n        passwordIsValid\n    )\n        formIsValid = true;\n\n    const normalClasses = classes[\"input__field\"];\n    const errorClasses = classes[\"input__error\"];\n\n    const nameInputClasses = nameInputHasError ? errorClasses : normalClasses;\n    const rollInputClasses = rollInputHasError || rollExists ? errorClasses : normalClasses;\n    const designationInputClasses = designationInputHasError ? errorClasses : normalClasses;\n    const emailInputClasses = emailInputHasError || emailExists ? errorClasses : normalClasses;\n    const phoneInputClasses = phoneInputHasError || phoneExists ? errorClasses : normalClasses;\n    const userNameInputClasses = userNameInputHasError || usernameExists ? errorClasses : normalClasses;\n    const passwordInputClasses = passwordInputHasError ? errorClasses : normalClasses;\n    const confirmPasswordInputClasses = confirmPasswordInputHasError ? errorClasses : normalClasses;\n\n    const [isRegistering, setIsRegistering] = useState(false);\n\n    const registerHandler = (data) => {\n        setIsRegistering(false);\n        if (data.accepted) {\n            history.push(\"/registersuccess/\" + \"Successfully registered to the library.\");\n        } else {\n            setRollExists(data.rollExists);\n            setEmailExists(data.emailExists);\n            setPhoneExists(data.phoneExists);\n            setUsernameExists(data.usernameExists);\n        }\n    };\n\n    const insertUser = async (body) => {\n        setIsRegistering(true);\n        window.scroll(0, 0);\n        return await fetch(\"http://localhost:5000/register\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(body),\n        })\n            .then((response) => response.json())\n            .then((data) => {registerHandler(data); return data;})\n            .catch((error) => console.log(error));\n    };\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n\n        if (!formIsValid) {\n            return;\n        }\n\n        const user = {\n            name: name.trim(),\n            roll: roll.trim(),\n            designation,\n            email: email.trim(),\n            phone: phone.trim(),\n            userName: userName.trim(),\n            password,\n        };\n\n        insertUser(user).then((data) => {\n            resetName();\n            if (!data.rollExists) resetRoll();\n            if (!data.emailExists) resetEmail();\n            if (!data.phoneExists) resetPhone();\n            if (!data.usernameExists) resetUserName();\n            resetPassword();\n            resetConfirmPassword();\n        });\n    };\n\n    const masterPhoneChangeHandler = (event) => {\n        phoneChangeHandler(event);\n        setPhoneExists(false);\n    };\n\n    const masterEmailChangeHandler = (event) => {\n        emailChangeHandler(event);\n        setEmailExists(false);\n    };\n\n    const masterUsernameChangeHandler = (event) => {\n        userNameChangeHandler(event);\n        setUsernameExists(false);\n    };\n\n    const masterRollChangeHandler = (event) => {\n        rollChangeHandler(event);\n        setRollExists(false);\n    };\n\n    const Loader = <h1 className={classes[\"registering\"]}>Registering...</h1>;\n    // console.log(userCtx);\n\n    if (!isRegistering) {\n        return (\n            <form className={`${classes[\"form\"]}`} autoComplete=\"off\" onSubmit={submitHandler}>\n                <h1 className={classes[\"form__title\"]}>{(userCtx.isLoaded && userCtx.user.isAdmin) ? \"Register a Member\" : \"Register\"}</h1>\n                <div className={`${classes[\"form__inputs\"]}`}>\n                    <div className={classes[\"input\"]}>\n                        <label className={`${classes[\"input__label\"]}`} htmlFor=\"name\">\n                            Name\n                        </label>\n                        <input\n                            className={nameInputClasses}\n                            id=\"name\"\n                            type=\"text\"\n                            value={name}\n                            name=\"name\"\n                            onChange={nameChangeHandler}\n                            onBlur={nameInputBlurHandler}\n                        />\n                        {nameInputHasError && <p className={classes[\"input__message\"]}>Name must not be empty.</p>}\n                    </div>\n                    <div className={classes[\"input\"]}>\n                        <label className={`${classes[\"input__label\"]}`} htmlFor=\"roll\">\n                            Roll Number\n                        </label>\n                        <input\n                            className={rollInputClasses}\n                            id=\"roll\"\n                            type=\"text\"\n                            value={roll}\n                            name=\"roll\"\n                            onChange={masterRollChangeHandler}\n                            onBlur={rollInputBlurHandler}\n                        />\n                        {(rollInputHasError || rollExists) && (\n                            <p className={classes[\"input__message\"]}>\n                                {rollInputHasError\n                                    ? \"Please enter a valid roll number.\"\n                                    : \"Roll number already exists.\"}\n                            </p>\n                        )}\n                    </div>\n                    <div className={classes[\"input\"]}>\n                        <label className={`${classes[\"input__label\"]}`} htmlFor=\"roll\">\n                            Choose Designation\n                        </label>\n                        <select\n                            className={designationInputClasses}\n                            value={designation}\n                            onChange={designationChangeHandler}\n                            onBlur={designationInputBlurHandler}\n                        >\n                            <option value=\"\" disabled>\n                                Select your designation\n                            </option>\n                            <option value=\"UG Student\" className={classes[\"option\"]}>\n                                UG Student\n                            </option>\n                            <option value=\"PG Student\" className={classes[\"option\"]}>\n                                PG Student\n                            </option>\n                            <option value=\"Research Scholar\" className={classes[\"option\"]}>\n                                Research Scholar\n                            </option>\n                            <option value=\"Faculty\" className={classes[\"option\"]}>\n                                Faculty\n                            </option>\n                        </select>\n                        {designationInputHasError && (\n                            <p className={classes[\"input__message\"]}>Please choose a designation.</p>\n                        )}\n                    </div>\n                    <div className={classes[\"input\"]}>\n                        <label className={`${classes[\"input__label\"]}`} htmlFor=\"email\">\n                            Email\n                        </label>\n                        <input\n                            className={emailInputClasses}\n                            id=\"email\"\n                            type=\"text\"\n                            value={email}\n                            name=\"email\"\n                            onChange={masterEmailChangeHandler}\n                            onBlur={emailInputBlurHandler}\n                        />\n                        {(emailInputHasError || emailExists) && (\n                            <p className={classes[\"input__message\"]}>\n                                {emailInputHasError ? \"Please enter a valid email.\" : \"Email already exists.\"}\n                            </p>\n                        )}\n                    </div>\n                    <div className={classes[\"input\"]}>\n                        <label className={`${classes[\"input__label\"]}`} htmlFor=\"phone\">\n                            Phone\n                        </label>\n                        <input\n                            className={phoneInputClasses}\n                            id=\"phone\"\n                            type=\"text\"\n                            value={phone}\n                            name=\"phone\"\n                            onChange={masterPhoneChangeHandler}\n                            onBlur={phoneInputBlurHandler}\n                        />\n                        {(phoneInputHasError || phoneExists) && (\n                            <p className={classes[\"input__message\"]}>\n                                {phoneInputHasError ? \"Please enter a valid phone number.\" : \"Phone already exists.\"}\n                            </p>\n                        )}\n                    </div>\n                    <div className={classes[\"input\"]}>\n                        <label className={`${classes[\"input__label\"]}`} htmlFor=\"userName\">\n                            Username\n                        </label>\n                        <input\n                            className={userNameInputClasses}\n                            id=\"userName\"\n                            type=\"text\"\n                            value={userName}\n                            name=\"username\"\n                            onChange={masterUsernameChangeHandler}\n                            onBlur={userNameInputBlurHandler}\n                        />\n                        {(userNameInputHasError || usernameExists) && (\n                            <p className={classes[\"input__message\"]}>\n                                {userNameInputHasError ? \"Username must not be empty.\" : \"Username already exists.\"}\n                            </p>\n                        )}\n                    </div>\n                    <div className={`${classes[\"input\"]}`}>\n                        <label className={`${classes[\"input__label\"]}`} htmlFor=\"password\">\n                            Password\n                        </label>\n                        <input\n                            className={passwordInputClasses}\n                            id=\"password\"\n                            type=\"password\"\n                            value={password}\n                            name=\"password\"\n                            onChange={passwordChangeHandler}\n                            onBlur={passwordInputBlurHandler}\n                        />\n                        {passwordInputHasError && (\n                            <p className={classes[\"input__message\"]}>Password cannot be empty.</p>\n                        )}\n                    </div>\n                    <div className={`${classes[\"input\"]}`}>\n                        <label className={`${classes[\"input__label\"]}`} htmlFor=\"confirm-password\">\n                            Confirm Password\n                        </label>\n                        <input\n                            className={confirmPasswordInputClasses}\n                            id=\"cofirm-password\"\n                            type=\"password\"\n                            value={confirmPassword}\n                            name=\"confirm-password\"\n                            onChange={confirmPasswordChangeHandler}\n                            onBlur={confirmPasswordInputBlurHandler}\n                        />\n                        {confirmPasswordInputHasError && (\n                            <p className={classes[\"input__message\"]}>Passwords do not match.</p>\n                        )}\n                    </div>\n                </div>\n                <div className={`${classes[\"form__btn-group\"]}`}>\n                    <button\n                        className={`${classes[\"form__btn\"]}`}\n                        // disabled={!formIsValid}\n                    >\n                        Register\n                    </button>\n                </div>\n            </form>\n        );\n    } else {\n        return Loader;\n    }\n};\n\nexport default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}