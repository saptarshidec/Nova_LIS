{"ast":null,"code":"var _jsxFileName = \"F:\\\\IIT Kharagpur\\\\Second Year\\\\SE Lab Group Project\\\\Nova LIS\\\\Nova_frontend\\\\src\\\\components\\\\bookcard\\\\BookCard.js\",\n    _s = $RefreshSig$();\n\nimport Popup from \"../popup/Popup\";\nimport UserContext from \"../../store/user-context\";\nimport { useContext, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport classes from \"./BookCard.module.css\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Book = props => {\n  _s();\n\n  const userCtx = useContext(UserContext);\n  const history = useHistory();\n\n  const detailsNavHandler = () => {\n    window.open(`http://localhost:3000/book/${props.number}`, \"_blank\");\n  };\n\n  const confirmIssueHandler = () => {\n    if (props.type === \"Returned\" && props.isDeleted) {\n      setPopUpStatus({\n        isOpen: true,\n        title: \"Issue Response\",\n        message: \"This book is no longer available in the library.\",\n        hasSingleBtn: true,\n        right: \"Ok\",\n        onClickRight: () => closeHandler\n      });\n    } else {\n      setPopUpStatus({\n        isOpen: true,\n        title: userCtx.isLoggedIn ? \"Confirm Book Issue\" : \"Login to Issue Book\",\n        message: userCtx.isLoggedIn ? \"Are you sure you want to issue this book?\" : \"You are not logged in to Nova LIS. Do you want to login?\",\n        hasSingleBtn: false,\n        left: \"Yes\",\n        right: \"No\",\n        onClickLeft: userCtx.isLoggedIn ? issueHandler : loginRedirectHandler,\n        onClickRight: closeHandler\n      });\n    }\n  };\n\n  const issueHandler = async () => {\n    closeHandler();\n    const body = {\n      bookid: props.id,\n      username: userCtx.user.userName\n    };\n    await fetch(\"http://localhost:5000/issue\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    }).then(response => response.json()).then(data => {\n      issueResponseHandler(data);\n    }).catch(error => console.log(error));\n  };\n\n  const issueResponseHandler = data => {\n    if (data.isIssued) {\n      setPopUpStatus(prevStatus => {\n        return { ...prevStatus,\n          isOpen: true,\n          title: \"Issue Response\",\n          message: \"Successfully issued book from Nova LIS.\",\n          hasSingleBtn: true,\n          right: \"Ok\",\n          onClickRight: () => profileRedirectHandler(\"Issued Books\")\n        };\n      });\n      return;\n    }\n\n    if (data.issuelimit) {\n      setPopUpStatus(prevStatus => {\n        return { ...prevStatus,\n          isOpen: true,\n          title: \"Issue Response\",\n          message: \"You have exceeded the maximum amount of books you can issue from Nova LIS.\",\n          hasSingleBtn: true,\n          right: \"Ok\"\n        };\n      });\n      return;\n    }\n\n    if (data.alreadyissued) {\n      setPopUpStatus(prevStatus => {\n        return { ...prevStatus,\n          isOpen: true,\n          title: \"Issue Response\",\n          message: \"You have already issued a copy of this book.\",\n          hasSingleBtn: true,\n          right: \"Ok\"\n        };\n      });\n      return;\n    }\n\n    if (data.canReserve) {\n      setPopUpStatus({\n        isOpen: true,\n        title: \"Issue Response\",\n        message: \"No copies available right now. Do you want to reserve the book?\",\n        hasSingleBtn: false,\n        left: \"Yes\",\n        right: \"No\",\n        onClickLeft: reserveHandler,\n        onClickRight: closeHandler\n      });\n    } else {\n      setPopUpStatus({\n        isOpen: true,\n        title: \"Issue Response\",\n        message: \"This book currently does not have any copies in the library. You have already reserved this book.\",\n        hasSingleBtn: true,\n        right: \"Ok\",\n        onClickRight: closeHandler\n      });\n    }\n  };\n\n  const confirmReturnHandler = () => {\n    setPopUpStatus({\n      isOpen: true,\n      title: \"Confirm Book Return\",\n      message: \"Are you sure you want to return this book?\",\n      hasSingleBtn: false,\n      left: \"Yes\",\n      right: \"No\",\n      onClickLeft: returnHandler,\n      onClickRight: closeHandler\n    });\n  };\n\n  const returnHandler = async () => {\n    closeHandler();\n    await fetch(\"http://localhost:5000/return/\" + props.tId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(data => returnResponseHandler(data)).catch(error => console.log(error));\n  };\n\n  const returnResponseHandler = data => {\n    if (data.isOverdue) {\n      setPopUpStatus({\n        isOpen: true,\n        title: \"Return Response\",\n        message: \"Successfully returned book. Pay a penalty of â‚¹ \" + data.penalty + \".\",\n        hasSingleBtn: true,\n        right: \"Pay\",\n        onClickRight: () => profileRedirectHandler(\"Returned Books\")\n      });\n    } else {\n      setPopUpStatus({\n        isOpen: true,\n        title: \"Return Response\",\n        message: \"Successfully returned book. No penalty incurred.\",\n        hasSingleBtn: true,\n        right: \"Ok\",\n        onClickRight: () => profileRedirectHandler(\"Returned Books\")\n      });\n    }\n  };\n\n  const confirmDeleteHandler = () => {\n    setPopUpStatus(prevStatus => {\n      return {\n        isOpen: true,\n        title: \"Confirm Book Deletion\",\n        message: \"Are you sure you want to remove this book from the library?\",\n        hasSingleBtn: false,\n        left: \"Yes\",\n        right: \"No\",\n        onClickLeft: deleteHandler,\n        onClickRight: closeHandler\n      };\n    });\n  };\n\n  const deleteHandler = async () => {\n    closeHandler();\n    await fetch(\"http://localhost:5000/deleteBook/\" + props.id, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(data => deleteResponseHandler(data)).catch(error => console.log(error));\n  };\n\n  const deleteResponseHandler = () => {\n    setPopUpStatus({\n      isOpen: true,\n      title: \"Delete Response\",\n      message: \"Successfully deleted the book.\",\n      hasSingleBtn: true,\n      right: \"Ok\",\n      onClickRight: () => {\n        closeHandler();\n        window.location.reload();\n      }\n    });\n  };\n\n  const confirmReminderHandler = () => {\n    setPopUpStatus(prevStatus => {\n      return {\n        isOpen: true,\n        title: \"Confirm Reminder\",\n        message: \"Are you sure you want to send a reminder message for this book to be returned?\",\n        hasSingleBtn: false,\n        left: \"Yes\",\n        right: \"No\",\n        onClickLeft: reminderHandler,\n        onClickRight: closeHandler\n      };\n    });\n  };\n\n  const reminderHandler = async () => {\n    closeHandler();\n    await fetch(\"http://localhost:5000/printReminder/\" + props.tId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(data => reminderResponseHandler(data)).catch(error => console.log(error));\n  };\n\n  const reminderResponseHandler = data => {\n    if (data.alreadySent) {\n      setPopUpStatus({\n        isOpen: true,\n        title: \"Reminder Response\",\n        message: \"Already printed the reminder message for this book.\",\n        hasSingleBtn: true,\n        right: \"Ok\",\n        onClickRight: closeHandler\n      });\n    } else {\n      setPopUpStatus({\n        isOpen: true,\n        title: \"Reminder Response\",\n        message: \"Successfully sent reminder.\",\n        hasSingleBtn: true,\n        right: \"Ok\",\n        onClickRight: closeHandler\n      });\n    }\n  };\n\n  const reserveHandler = async () => {\n    closeHandler();\n    const reserveData = {\n      bookid: props.id,\n      username: userCtx.user.userName\n    };\n    await fetch(\"http://localhost:5000/reserve\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(reserveData)\n    }).then(response => response.json()).then(data => reserveResponseHandler(data)).catch(error => console.log(error));\n  };\n\n  const reserveResponseHandler = () => {\n    setPopUpStatus({\n      isOpen: true,\n      title: \"Confirm Reminder\",\n      message: \"Book has been reserved successfully.\",\n      hasSingleBtn: false,\n      right: \"Ok\",\n      onClickRight: closeHandler\n    });\n  };\n\n  const closeHandler = () => {\n    setPopUpStatus(prevStatus => {\n      return { ...prevStatus,\n        isOpen: false\n      };\n    });\n  };\n\n  const loginRedirectHandler = () => {\n    closeHandler();\n    history.push(\"/login\");\n  };\n\n  const profileRedirectHandler = section => {\n    closeHandler();\n    userCtx.onBookQuery(section);\n  };\n\n  const [popUpStatus, setPopUpStatus] = useState({\n    isOpen: false,\n    title: userCtx.isLoggedIn ? \"Confirm Book Issue\" : \"Login to Issue Book\",\n    message: userCtx.isLoggedIn ? \"Are you sure you want to issue this book?\" : \"You are not logged in to Nova LIS. Do you want to login?\",\n    hasSingleBtn: false,\n    left: \"Yes\",\n    right: \"No\",\n    onClickLeft: userCtx.isLoggedIn ? issueHandler : loginRedirectHandler,\n    onClickRight: closeHandler\n  });\n\n  let metaData = /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n\n  if (props.type === \"Issued\") {\n    metaData = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes[\"author\"],\n        children: [\"Issued On: \\xA0\", props.issuedOn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes[\"author\"],\n        children: [\"Deadline: \\xA0\", props.expectedReturn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }, this), props.isPrinted ? /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes[\"author\"],\n        children: \"Deadline crossed. Please return the book.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes[\"author\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true);\n  }\n\n  if (props.type === \"Returned\") {\n    metaData = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes[\"author\"],\n        children: [\"Issued On: \\xA0\", props.issuedOn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes[\"author\"],\n        children: [\"Returned On: \\xA0\", props.returnedOn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n  if (props.type === \"Reminder\") {\n    metaData = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes[\"author\"],\n        children: [\"Issued On: \\xA0\", props.issuedOn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes[\"author\"],\n        children: [\"Deadline: \\xA0\", props.expectedReturn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes[\"author\"],\n        children: [\"Username: \", props.userName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 17\n      }, this), props.isOverdue ? /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes[\"author\"],\n        children: \"Overdue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 36\n      }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: classes[\"author\"],\n        children: \"Not Overdue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 85\n      }, this)]\n    }, void 0, true);\n  }\n\n  let transaction = /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n\n  if (props.type === \"Issued\") {\n    transaction = /*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes[\"shadow-btn\"],\n      onClick: confirmReturnHandler,\n      children: \"Return\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 13\n    }, this);\n  } else if (props.type === \"Display\" || props.type === \"Returned\") {\n    transaction = /*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes[\"shadow-btn\"],\n      onClick: confirmIssueHandler,\n      children: props.type === \"Display\" ? \"Issue\" : \"Issue Again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 13\n    }, this);\n  } else if (props.type === \"Reminder\") {\n    transaction = props.isOverdue ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes[\"shadow-btn\"],\n      onClick: confirmReminderHandler,\n      children: \"Send Reminder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  } else if (props.type === \"Reserved\") {\n    transaction = props.isAvailable ? /*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes[\"shadow-btn\"],\n      onClick: confirmIssueHandler,\n      children: \"Claim\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 14\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  } else {\n    transaction = /*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes[\"shadow-btn\"],\n      onClick: confirmDeleteHandler,\n      children: \"Remove Book\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 13\n    }, this);\n  } // const shouldPrintTransaction = ((!userCtx.user.isAdmin || (userCtx.user.isAdmin && props.type === \"Reminder\"));\n\n\n  const shouldPrintTransaction = !userCtx.isLoggedIn || userCtx.isLoggedIn && !userCtx.user.isAdmin || userCtx.isLoggedIn && userCtx.user.isAdmin && (props.type === \"Reminder\" || props.type === \"Expired\") || props.type === \"Reserved\" && props.isAvailable;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(Popup, {\n      isOpen: popUpStatus.isOpen,\n      title: popUpStatus.title,\n      message: popUpStatus.message,\n      hasSingleBtn: popUpStatus.hasSingleBtn,\n      left: popUpStatus.left,\n      right: popUpStatus.right,\n      onClickLeft: popUpStatus.onClickLeft,\n      onClickRight: popUpStatus.onClickRight\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 17\n    }, this), document.getElementById(\"overlay-root\")), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes[\"book\"],\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes[\"cover__container\"],\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: props.cover,\n          alt: props.bookName,\n          className: classes[\"cover\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes[\"shadow\"],\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes[\"shadow-btn__group\"],\n            children: [shouldPrintTransaction && transaction, /*#__PURE__*/_jsxDEV(\"button\", {\n              className: classes[\"shadow-btn\"],\n              onClick: detailsNavHandler,\n              children: \"Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes[\"book__title\"],\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: classes[\"name\"],\n          children: props.bookName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: classes[\"author\"],\n          children: props.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 21\n        }, this), metaData]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Book, \"UA1JYPRK4w6ExrmOQiBHprzL+8k=\", false, function () {\n  return [useHistory];\n});\n\n_c = Book;\nexport default Book;\n\nvar _c;\n\n$RefreshReg$(_c, \"Book\");","map":{"version":3,"sources":["F:/IIT Kharagpur/Second Year/SE Lab Group Project/Nova LIS/Nova_frontend/src/components/bookcard/BookCard.js"],"names":["Popup","UserContext","useContext","useState","useHistory","ReactDOM","classes","Book","props","userCtx","history","detailsNavHandler","window","open","number","confirmIssueHandler","type","isDeleted","setPopUpStatus","isOpen","title","message","hasSingleBtn","right","onClickRight","closeHandler","isLoggedIn","left","onClickLeft","issueHandler","loginRedirectHandler","body","bookid","id","username","user","userName","fetch","method","headers","JSON","stringify","then","response","json","data","issueResponseHandler","catch","error","console","log","isIssued","prevStatus","profileRedirectHandler","issuelimit","alreadyissued","canReserve","reserveHandler","confirmReturnHandler","returnHandler","tId","returnResponseHandler","isOverdue","penalty","confirmDeleteHandler","deleteHandler","deleteResponseHandler","location","reload","confirmReminderHandler","reminderHandler","reminderResponseHandler","alreadySent","reserveData","reserveResponseHandler","push","section","onBookQuery","popUpStatus","metaData","issuedOn","expectedReturn","isPrinted","returnedOn","transaction","isAvailable","shouldPrintTransaction","isAdmin","createPortal","document","getElementById","cover","bookName","author"],"mappings":"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","sourcesContent":["import Popup from \"../popup/Popup\";\nimport UserContext from \"../../store/user-context\";\nimport { useContext, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport classes from \"./BookCard.module.css\";\n\nconst Book = (props) => {\n    const userCtx = useContext(UserContext);\n    const history = useHistory();\n\n    const detailsNavHandler = () => {\n        window.open(`http://localhost:3000/book/${props.number}`, \"_blank\");\n    };\n\n    const confirmIssueHandler = () => {\n        if (props.type === \"Returned\" && props.isDeleted) {\n            setPopUpStatus({\n                isOpen: true,\n                title: \"Issue Response\",\n                message: \"This book is no longer available in the library.\",\n                hasSingleBtn: true,\n                right: \"Ok\",\n                onClickRight: () => closeHandler,\n            });\n        }\n        else {\n            setPopUpStatus({\n                isOpen: true,\n                title: userCtx.isLoggedIn ? \"Confirm Book Issue\" : \"Login to Issue Book\",\n                message: userCtx.isLoggedIn\n                    ? \"Are you sure you want to issue this book?\"\n                    : \"You are not logged in to Nova LIS. Do you want to login?\",\n                hasSingleBtn: false,\n                left: \"Yes\",\n                right: \"No\",\n                onClickLeft: userCtx.isLoggedIn ? issueHandler : loginRedirectHandler,\n                onClickRight: closeHandler,\n            });\n        }\n    };\n\n    const issueHandler = async () => {\n        closeHandler();\n        const body = {\n            bookid: props.id,\n            username: userCtx.user.userName,\n        };\n        await fetch(\"http://localhost:5000/issue\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(body),\n        })\n            .then((response) => response.json())\n            .then((data) => {\n                issueResponseHandler(data);\n            })\n            .catch((error) => console.log(error));\n    };\n\n    const issueResponseHandler = (data) => {\n        if (data.isIssued) {\n            setPopUpStatus((prevStatus) => {\n                return {\n                    ...prevStatus,\n                    isOpen: true,\n                    title: \"Issue Response\",\n                    message: \"Successfully issued book from Nova LIS.\",\n                    hasSingleBtn: true,\n                    right: \"Ok\",\n                    onClickRight: () => profileRedirectHandler(\"Issued Books\"),\n                };\n            });\n            return;\n        }\n        if (data.issuelimit) {\n            setPopUpStatus((prevStatus) => {\n                return {\n                    ...prevStatus,\n                    isOpen: true,\n                    title: \"Issue Response\",\n                    message: \"You have exceeded the maximum amount of books you can issue from Nova LIS.\",\n                    hasSingleBtn: true,\n                    right: \"Ok\",\n                };\n            });\n            return;\n        }\n        if (data.alreadyissued) {\n            setPopUpStatus((prevStatus) => {\n                return {\n                    ...prevStatus,\n                    isOpen: true,\n                    title: \"Issue Response\",\n                    message: \"You have already issued a copy of this book.\",\n                    hasSingleBtn: true,\n                    right: \"Ok\",\n                };\n            });\n            return;\n        }\n        if (data.canReserve) {\n            setPopUpStatus({\n                isOpen: true,\n                title: \"Issue Response\",\n                message: \"No copies available right now. Do you want to reserve the book?\",\n                hasSingleBtn: false,\n                left: \"Yes\",\n                right: \"No\",\n                onClickLeft: reserveHandler,\n                onClickRight: closeHandler,\n            });\n        } else {\n            setPopUpStatus({\n                isOpen: true,\n                title: \"Issue Response\",\n                message:\n                    \"This book currently does not have any copies in the library. You have already reserved this book.\",\n                hasSingleBtn: true,\n                right: \"Ok\",\n                onClickRight: closeHandler,\n            });\n        }\n    };\n\n    const confirmReturnHandler = () => {\n        setPopUpStatus({\n            isOpen: true,\n            title: \"Confirm Book Return\",\n            message: \"Are you sure you want to return this book?\",\n            hasSingleBtn: false,\n            left: \"Yes\",\n            right: \"No\",\n            onClickLeft: returnHandler,\n            onClickRight: closeHandler,\n        });\n    };\n\n    const returnHandler = async () => {\n        closeHandler();\n        await fetch(\"http://localhost:5000/return/\" + props.tId, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then((response) => response.json())\n            .then((data) => returnResponseHandler(data))\n            .catch((error) => console.log(error));\n    };\n\n    const returnResponseHandler = (data) => {\n        if (data.isOverdue) {\n            setPopUpStatus({\n                isOpen: true,\n                title: \"Return Response\",\n                message: \"Successfully returned book. Pay a penalty of â‚¹ \" + data.penalty + \".\",\n                hasSingleBtn: true,\n                right: \"Pay\",\n                onClickRight: () => profileRedirectHandler(\"Returned Books\"),\n            });\n        } else {\n            setPopUpStatus({\n                isOpen: true,\n                title: \"Return Response\",\n                message: \"Successfully returned book. No penalty incurred.\",\n                hasSingleBtn: true,\n                right: \"Ok\",\n                onClickRight: () => profileRedirectHandler(\"Returned Books\"),\n            });\n        }\n    };\n\n    const confirmDeleteHandler = () => {\n        setPopUpStatus((prevStatus) => {\n            return {\n                isOpen: true,\n                title: \"Confirm Book Deletion\",\n                message: \"Are you sure you want to remove this book from the library?\",\n                hasSingleBtn: false,\n                left: \"Yes\",\n                right: \"No\",\n                onClickLeft: deleteHandler,\n                onClickRight: closeHandler,\n            };\n        });\n    };\n\n    const deleteHandler = async () => {\n        closeHandler();\n        await fetch(\"http://localhost:5000/deleteBook/\" + props.id, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then((response) => response.json())\n            .then((data) => deleteResponseHandler(data))\n            .catch((error) => console.log(error));\n    };\n\n    const deleteResponseHandler = () => {\n        setPopUpStatus({\n            isOpen: true,\n            title: \"Delete Response\",\n            message: \"Successfully deleted the book.\",\n            hasSingleBtn: true,\n            right: \"Ok\",\n            onClickRight: () => {\n                closeHandler();\n                window.location.reload();\n            },\n        });\n    };\n\n    const confirmReminderHandler = () => {\n        setPopUpStatus((prevStatus) => {\n            return {\n                isOpen: true,\n                title: \"Confirm Reminder\",\n                message: \"Are you sure you want to send a reminder message for this book to be returned?\",\n                hasSingleBtn: false,\n                left: \"Yes\",\n                right: \"No\",\n                onClickLeft: reminderHandler,\n                onClickRight: closeHandler,\n            };\n        });\n    };\n\n    const reminderHandler = async () => {\n        closeHandler();\n        await fetch(\"http://localhost:5000/printReminder/\" + props.tId, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n            .then((response) => response.json())\n            .then((data) => reminderResponseHandler(data))\n            .catch((error) => console.log(error));\n    };\n\n    const reminderResponseHandler = (data) => {\n        if (data.alreadySent) {\n            setPopUpStatus({\n                isOpen: true,\n                title: \"Reminder Response\",\n                message: \"Already printed the reminder message for this book.\",\n                hasSingleBtn: true,\n                right: \"Ok\",\n                onClickRight: closeHandler,\n            });\n        } else {\n            setPopUpStatus({\n                isOpen: true,\n                title: \"Reminder Response\",\n                message: \"Successfully sent reminder.\",\n                hasSingleBtn: true,\n                right: \"Ok\",\n                onClickRight: closeHandler,\n            });\n        }\n    };\n\n    const reserveHandler = async () => {\n        closeHandler();\n        const reserveData = {\n            bookid: props.id,\n            username: userCtx.user.userName,\n        };\n        await fetch(\"http://localhost:5000/reserve\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(reserveData),\n        })\n            .then((response) => response.json())\n            .then((data) => reserveResponseHandler(data))\n            .catch((error) => console.log(error));\n    };\n\n    const reserveResponseHandler = () => {\n        setPopUpStatus({\n            isOpen: true,\n            title: \"Confirm Reminder\",\n            message: \"Book has been reserved successfully.\",\n            hasSingleBtn: false,\n            right: \"Ok\",\n            onClickRight: closeHandler,\n        });\n    };\n\n    const closeHandler = () => {\n        setPopUpStatus((prevStatus) => {\n            return { ...prevStatus, isOpen: false };\n        });\n    };\n\n    const loginRedirectHandler = () => {\n        closeHandler();\n        history.push(\"/login\");\n    };\n\n    const profileRedirectHandler = (section) => {\n        closeHandler();\n        userCtx.onBookQuery(section);\n    };\n\n    const [popUpStatus, setPopUpStatus] = useState({\n        isOpen: false,\n        title: userCtx.isLoggedIn ? \"Confirm Book Issue\" : \"Login to Issue Book\",\n        message: userCtx.isLoggedIn\n            ? \"Are you sure you want to issue this book?\"\n            : \"You are not logged in to Nova LIS. Do you want to login?\",\n        hasSingleBtn: false,\n        left: \"Yes\",\n        right: \"No\",\n        onClickLeft: userCtx.isLoggedIn ? issueHandler : loginRedirectHandler,\n        onClickRight: closeHandler,\n    });\n\n    let metaData = <></>;\n    if (props.type === \"Issued\") {\n        metaData = (\n            <>\n                <h3 className={classes[\"author\"]}>Issued On: &nbsp;{props.issuedOn}</h3>\n                <h3 className={classes[\"author\"]}>Deadline: &nbsp;{props.expectedReturn}</h3>\n                {props.isPrinted ? (\n                    <h3 className={classes[\"author\"]}>Deadline crossed. Please return the book.</h3>\n                ) : (\n                    <h3 className={classes[\"author\"]}></h3>\n                )}\n            </>\n        );\n    }\n    if (props.type === \"Returned\") {\n        metaData = (\n            <>\n                <h3 className={classes[\"author\"]}>Issued On: &nbsp;{props.issuedOn}</h3>\n                <h3 className={classes[\"author\"]}>Returned On: &nbsp;{props.returnedOn}</h3>\n            </>\n        );\n    }\n    if (props.type === \"Reminder\") {\n        metaData = (\n            <>\n                <h3 className={classes[\"author\"]}>Issued On: &nbsp;{props.issuedOn}</h3>\n                <h3 className={classes[\"author\"]}>Deadline: &nbsp;{props.expectedReturn}</h3>\n                <h3 className={classes[\"author\"]}>Username: {props.userName}</h3>\n                {props.isOverdue ? <h3 className={classes[\"author\"]}>Overdue</h3> : <h3 className={classes[\"author\"]}>Not Overdue</h3>}\n            </>\n        );\n    }\n\n    let transaction = <></>;\n    if (props.type === \"Issued\") {\n        transaction = (\n            <button className={classes[\"shadow-btn\"]} onClick={confirmReturnHandler}>\n                Return\n            </button>\n        );\n    } else if (props.type === \"Display\" || props.type === \"Returned\") {\n        transaction = (\n            <button className={classes[\"shadow-btn\"]} onClick={confirmIssueHandler}>\n                {props.type === \"Display\" ? \"Issue\" : \"Issue Again\"}\n            </button>\n        );\n    } else if (props.type === \"Reminder\") {\n        transaction = props.isOverdue ? (\n            <button className={classes[\"shadow-btn\"]} onClick={confirmReminderHandler}>\n                Send Reminder\n            </button>\n        ) : (\n            <></>\n        );\n    } else if (props.type === \"Reserved\") {\n        transaction = (\n            props.isAvailable ?\n            (<button className={classes[\"shadow-btn\"]} onClick={confirmIssueHandler}>\n                Claim\n            </button>) : <></>\n        );\n    } else {\n        transaction = (\n            <button className={classes[\"shadow-btn\"]} onClick={confirmDeleteHandler}>\n                Remove Book\n            </button>\n        );\n    }\n\n    // const shouldPrintTransaction = ((!userCtx.user.isAdmin || (userCtx.user.isAdmin && props.type === \"Reminder\"));\n    const shouldPrintTransaction =\n        !userCtx.isLoggedIn ||\n        (userCtx.isLoggedIn && !userCtx.user.isAdmin) ||\n        (userCtx.isLoggedIn && userCtx.user.isAdmin && (props.type === \"Reminder\" || props.type === \"Expired\")) ||\n        (props.type === \"Reserved\" && props.isAvailable);\n\n    return (\n        <>\n            {ReactDOM.createPortal(\n                <Popup\n                    isOpen={popUpStatus.isOpen}\n                    title={popUpStatus.title}\n                    message={popUpStatus.message}\n                    hasSingleBtn={popUpStatus.hasSingleBtn}\n                    left={popUpStatus.left}\n                    right={popUpStatus.right}\n                    onClickLeft={popUpStatus.onClickLeft}\n                    onClickRight={popUpStatus.onClickRight}\n                />,\n                document.getElementById(\"overlay-root\")\n            )}\n\n            <div className={classes[\"book\"]}>\n                <div className={classes[\"cover__container\"]}>\n                    <img src={props.cover} alt={props.bookName} className={classes[\"cover\"]} />\n                    <div className={classes[\"shadow\"]}>\n                        <div className={classes[\"shadow-btn__group\"]}>\n                            {shouldPrintTransaction && transaction}\n                            <button className={classes[\"shadow-btn\"]} onClick={detailsNavHandler}>\n                                Details\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div className={classes[\"book__title\"]}>\n                    <h2 className={classes[\"name\"]}>{props.bookName}</h2>\n                    <h3 className={classes[\"author\"]}>{props.author}</h3>\n                    {metaData}\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Book;\n"]},"metadata":{},"sourceType":"module"}